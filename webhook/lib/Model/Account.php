<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Webhook\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>Ph2.5向けに作成したもの</p>
 *
 * OpenAPI spec version: 1.1.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Webhook\Client\Model;

use \ArrayAccess;
use \Ganb\Webhook\Client\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @description 入金口座情報
 * @package  Ganb\Webhook\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ra_id' => 'string',
        'ra_branch_code' => 'string',
        'ra_branch_name_kana' => 'string',
        'ra_account_number' => 'string',
        'ra_holder_name' => 'string',
        'base_date' => 'string',
        'base_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ra_id' => null,
        'ra_branch_code' => null,
        'ra_branch_name_kana' => null,
        'ra_account_number' => null,
        'ra_holder_name' => null,
        'base_date' => null,
        'base_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ra_id' => 'raId',
        'ra_branch_code' => 'raBranchCode',
        'ra_branch_name_kana' => 'raBranchNameKana',
        'ra_account_number' => 'raAccountNumber',
        'ra_holder_name' => 'raHolderName',
        'base_date' => 'baseDate',
        'base_time' => 'baseTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ra_id' => 'setRaId',
        'ra_branch_code' => 'setRaBranchCode',
        'ra_branch_name_kana' => 'setRaBranchNameKana',
        'ra_account_number' => 'setRaAccountNumber',
        'ra_holder_name' => 'setRaHolderName',
        'base_date' => 'setBaseDate',
        'base_time' => 'setBaseTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ra_id' => 'getRaId',
        'ra_branch_code' => 'getRaBranchCode',
        'ra_branch_name_kana' => 'getRaBranchNameKana',
        'ra_account_number' => 'getRaAccountNumber',
        'ra_holder_name' => 'getRaHolderName',
        'base_date' => 'getBaseDate',
        'base_time' => 'getBaseTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ra_id'] = isset($data['ra_id']) ? $data['ra_id'] : null;
        $this->container['ra_branch_code'] = isset($data['ra_branch_code']) ? $data['ra_branch_code'] : null;
        $this->container['ra_branch_name_kana'] = isset($data['ra_branch_name_kana']) ? $data['ra_branch_name_kana'] : null;
        $this->container['ra_account_number'] = isset($data['ra_account_number']) ? $data['ra_account_number'] : null;
        $this->container['ra_holder_name'] = isset($data['ra_holder_name']) ? $data['ra_holder_name'] : null;
        $this->container['base_date'] = isset($data['base_date']) ? $data['base_date'] : null;
        $this->container['base_time'] = isset($data['base_time']) ? $data['base_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ra_id'] === null) {
            $invalidProperties[] = "'ra_id' can't be null";
        }
        if ((mb_strlen($this->container['ra_id']) > 29)) {
            $invalidProperties[] = "invalid value for 'ra_id', the character length must be smaller than or equal to 29.";
        }

        if ((mb_strlen($this->container['ra_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'ra_id', the character length must be bigger than or equal to 12.";
        }

        if ($this->container['ra_branch_code'] === null) {
            $invalidProperties[] = "'ra_branch_code' can't be null";
        }
        if ((mb_strlen($this->container['ra_branch_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'ra_branch_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['ra_branch_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'ra_branch_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['ra_branch_name_kana'] === null) {
            $invalidProperties[] = "'ra_branch_name_kana' can't be null";
        }
        if ((mb_strlen($this->container['ra_branch_name_kana']) > 15)) {
            $invalidProperties[] = "invalid value for 'ra_branch_name_kana', the character length must be smaller than or equal to 15.";
        }

        if ((mb_strlen($this->container['ra_branch_name_kana']) < 1)) {
            $invalidProperties[] = "invalid value for 'ra_branch_name_kana', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ra_account_number'] === null) {
            $invalidProperties[] = "'ra_account_number' can't be null";
        }
        if ((mb_strlen($this->container['ra_account_number']) > 7)) {
            $invalidProperties[] = "invalid value for 'ra_account_number', the character length must be smaller than or equal to 7.";
        }

        if ((mb_strlen($this->container['ra_account_number']) < 7)) {
            $invalidProperties[] = "invalid value for 'ra_account_number', the character length must be bigger than or equal to 7.";
        }

        if ($this->container['ra_holder_name'] === null) {
            $invalidProperties[] = "'ra_holder_name' can't be null";
        }
        if ((mb_strlen($this->container['ra_holder_name']) > 48)) {
            $invalidProperties[] = "invalid value for 'ra_holder_name', the character length must be smaller than or equal to 48.";
        }

        if ((mb_strlen($this->container['ra_holder_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'ra_holder_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['base_date'] === null) {
            $invalidProperties[] = "'base_date' can't be null";
        }
        if ((mb_strlen($this->container['base_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'base_date', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['base_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'base_date', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['base_time'] === null) {
            $invalidProperties[] = "'base_time' can't be null";
        }
        if ((mb_strlen($this->container['base_time']) > 14)) {
            $invalidProperties[] = "invalid value for 'base_time', the character length must be smaller than or equal to 14.";
        }

        if ((mb_strlen($this->container['base_time']) < 14)) {
            $invalidProperties[] = "invalid value for 'base_time', the character length must be bigger than or equal to 14.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ra_id
     *
     * @return string
     */
    public function getRaId()
    {
        return $this->container['ra_id'];
    }

    /**
     * Sets ra_id
     *
     * @param string $ra_id 入金口座ID 半角数字 入金先の口座を識別するID
     *
     * @return $this
     */
    public function setRaId($ra_id)
    {
        if ((mb_strlen($ra_id) > 29)) {
            throw new \InvalidArgumentException('invalid length for $ra_id when calling Account., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($ra_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $ra_id when calling Account., must be bigger than or equal to 12.');
        }

        $this->container['ra_id'] = $ra_id;

        return $this;
    }

    /**
     * Gets ra_branch_code
     *
     * @return string
     */
    public function getRaBranchCode()
    {
        return $this->container['ra_branch_code'];
    }

    /**
     * Sets ra_branch_code
     *
     * @param string $ra_branch_code 入金口座　支店コード 半角数字
     *
     * @return $this
     */
    public function setRaBranchCode($ra_branch_code)
    {
        if ((mb_strlen($ra_branch_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_code when calling Account., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ra_branch_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_code when calling Account., must be bigger than or equal to 3.');
        }

        $this->container['ra_branch_code'] = $ra_branch_code;

        return $this;
    }

    /**
     * Gets ra_branch_name_kana
     *
     * @return string
     */
    public function getRaBranchNameKana()
    {
        return $this->container['ra_branch_name_kana'];
    }

    /**
     * Sets ra_branch_name_kana
     *
     * @param string $ra_branch_name_kana 半角文字
     *
     * @return $this
     */
    public function setRaBranchNameKana($ra_branch_name_kana)
    {
        if ((mb_strlen($ra_branch_name_kana) > 15)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_name_kana when calling Account., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($ra_branch_name_kana) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_name_kana when calling Account., must be bigger than or equal to 1.');
        }

        $this->container['ra_branch_name_kana'] = $ra_branch_name_kana;

        return $this;
    }

    /**
     * Gets ra_account_number
     *
     * @return string
     */
    public function getRaAccountNumber()
    {
        return $this->container['ra_account_number'];
    }

    /**
     * Sets ra_account_number
     *
     * @param string $ra_account_number 半角数字
     *
     * @return $this
     */
    public function setRaAccountNumber($ra_account_number)
    {
        if ((mb_strlen($ra_account_number) > 7)) {
            throw new \InvalidArgumentException('invalid length for $ra_account_number when calling Account., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($ra_account_number) < 7)) {
            throw new \InvalidArgumentException('invalid length for $ra_account_number when calling Account., must be bigger than or equal to 7.');
        }

        $this->container['ra_account_number'] = $ra_account_number;

        return $this;
    }

    /**
     * Gets ra_holder_name
     *
     * @return string
     */
    public function getRaHolderName()
    {
        return $this->container['ra_holder_name'];
    }

    /**
     * Sets ra_holder_name
     *
     * @param string $ra_holder_name 全角文字
     *
     * @return $this
     */
    public function setRaHolderName($ra_holder_name)
    {
        if ((mb_strlen($ra_holder_name) > 48)) {
            throw new \InvalidArgumentException('invalid length for $ra_holder_name when calling Account., must be smaller than or equal to 48.');
        }
        if ((mb_strlen($ra_holder_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ra_holder_name when calling Account., must be bigger than or equal to 1.');
        }

        $this->container['ra_holder_name'] = $ra_holder_name;

        return $this;
    }

    /**
     * Gets base_date
     *
     * @return string
     */
    public function getBaseDate()
    {
        return $this->container['base_date'];
    }

    /**
     * Sets base_date
     *
     * @param string $base_date 基準日 半角文字 応答日付、もしくは入金明細の基準日を示す。 YYYY-MM-DD形式
     *
     * @return $this
     */
    public function setBaseDate($base_date)
    {
        if ((mb_strlen($base_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $base_date when calling Account., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($base_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $base_date when calling Account., must be bigger than or equal to 10.');
        }

        $this->container['base_date'] = $base_date;

        return $this;
    }

    /**
     * Gets base_time
     *
     * @return string
     */
    public function getBaseTime()
    {
        return $this->container['base_time'];
    }

    /**
     * Sets base_time
     *
     * @param string $base_time 基準時刻 半角文字 応答時刻、もしくは入金明細の基準時刻を示す。  ISO8601 時差(offset)も表記 HH:MM:SS+09:00形式
     *
     * @return $this
     */
    public function setBaseTime($base_time)
    {
        if ((mb_strlen($base_time) > 14)) {
            throw new \InvalidArgumentException('invalid length for $base_time when calling Account., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($base_time) < 14)) {
            throw new \InvalidArgumentException('invalid length for $base_time when calling Account., must be bigger than or equal to 14.');
        }

        $this->container['base_time'] = $base_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


