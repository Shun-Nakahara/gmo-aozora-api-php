<?php
/**
 * SubscribeRequestBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Webhook\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>Ph2.5向けに作成したもの</p>
 *
 * OpenAPI spec version: 1.1.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Webhook\Client\Model;

use \ArrayAccess;
use \Ganb\Webhook\Client\ObjectSerializer;

/**
 * SubscribeRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Ganb\Webhook\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscribeRequestBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscribeRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subscribe_status' => 'string',
        'event_types' => '\Ganb\Webhook\Client\Model\EventType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subscribe_status' => null,
        'event_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscribe_status' => 'subscribeStatus',
        'event_types' => 'eventTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscribe_status' => 'setSubscribeStatus',
        'event_types' => 'setEventTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscribe_status' => 'getSubscribeStatus',
        'event_types' => 'getEventTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscribe_status'] = isset($data['subscribe_status']) ? $data['subscribe_status'] : null;
        $this->container['event_types'] = isset($data['event_types']) ? $data['event_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subscribe_status'] === null) {
            $invalidProperties[] = "'subscribe_status' can't be null";
        }
        if ((mb_strlen($this->container['subscribe_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'subscribe_status', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['subscribe_status']) < 1)) {
            $invalidProperties[] = "invalid value for 'subscribe_status', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['event_types'] === null) {
            $invalidProperties[] = "'event_types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscribe_status
     *
     * @return string
     */
    public function getSubscribeStatus()
    {
        return $this->container['subscribe_status'];
    }

    /**
     * Sets subscribe_status
     *
     * @param string $subscribe_status 配信状態 半角数字 0=配信停止要求 1=配信開始要求
     *
     * @return $this
     */
    public function setSubscribeStatus($subscribe_status)
    {
        if ((mb_strlen($subscribe_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $subscribe_status when calling SubscribeRequestBody., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($subscribe_status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subscribe_status when calling SubscribeRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['subscribe_status'] = $subscribe_status;

        return $this;
    }

    /**
     * Gets event_types
     *
     * @return \Ganb\Webhook\Client\Model\EventType[]
     */
    public function getEventTypes()
    {
        return $this->container['event_types'];
    }

    /**
     * Sets event_types
     *
     * @param \Ganb\Webhook\Client\Model\EventType[] $event_types イベント種別のリスト
     *
     * @return $this
     */
    public function setEventTypes($event_types)
    {
        $this->container['event_types'] = $event_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


